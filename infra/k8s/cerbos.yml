apiVersion: apps/v1
kind: Deployment
metadata:
  name: cerbos
  labels:
    app: cerbos
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cerbos
  template:
    metadata:
      labels:
        app: cerbos
    spec:
      containers:
        - name: cerbos
          image: ghcr.io/cerbos/cerbos:latest
          ports:
            - containerPort: 3592
              name: http
            - containerPort: 3593
              name: grpc
          env:
            - name: CERBOS_NO_TELEMETRY
              value: "1"
          args:
            - "server"
            - "--config=/config/config.yaml"
          volumeMounts:
            - name: cerbos-config
              mountPath: /config
            - name: cerbos-policies
              mountPath: /policies
      volumes:
        - name: cerbos-config
          configMap:
            name: cerbos-config
        - name: cerbos-policies
          configMap:
            name: cerbos-policies

---
apiVersion: v1
kind: Service
metadata:
  name: cerbos-service
spec:
  selector:
    app: cerbos
  ports:
    - name: http
      protocol: TCP
      port: 3592
      targetPort: http
    - name: grpc
      protocol: TCP
      port: 3593
      targetPort: grpc

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: cerbos-config
data:
  config.yaml: |
    server:
      httpListenAddr: ":3592"
      grpcListenAddr: ":3593"
    storage:
      driver: "disk"
      disk:
        directory: /policies
        watchForChanges: true
    tracing:
      serviceName: cerbos
      sampleProbability: 1
      exporter: otlp
      otlp:
        collectorEndpoint: "jaeger-service.default.svc.cluster.local:4317"
    audit:
      enabled: true
      accessLogsEnabled: true
      decisionLogsEnabled: true
      backend: file
      file:
        path: stdout
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: cerbos-policies
data:
  common_roles.yaml: |
    ---
    apiVersion: api.cerbos.dev/v1
    description: |-
      Common dynamic roles used within the Finance Demo app
    derivedRoles:
      name: common_roles
      definitions:
        # If the principal belongs to group `USER` in a request, and the `resource`s
        # `ownerId` attribute matches `principal`s `id` then the `principal` is considered
        # as `OWNER` within Cerbos for the policy evaluation.
        - name: OWNER
          parentRoles: ["USER"]
          condition:
            match:
              expr: request.resource.attr.ownerId == request.principal.id

        # If the principal belongs to group `USER` in a request, and the `principal`s
        # `department` attribute is "FINANCE",then the `principal` is considered
        # as `FINANCE` role within Cerbos for the policy evaluation.
        - name: FINANCE
          parentRoles: ["USER"]
          condition:
            match:
              expr: request.principal.attr.department == "FINANCE"

        # If the principal belongs to group `MANAGER` in a request, and the `principal`s
        # `department` attribute is "FINANCE",then the `principal` is considered
        # as `FINANCE_MANAGER` role within Cerbos for the policy evaluation.
        - name: FINANCE_MANAGER
          parentRoles: ["MANAGER"]
          condition:
            match:
              expr: request.principal.attr.department == "FINANCE"

        # If the principal belongs to group `MANAGER` in a request, and the `principal`s
        # `region` attribute matches `resource`s `region` attribute, then the `principal`
        # is considered as `REGION_MANAGER` role within Cerbos for the policy evaluation.
        - name: REGION_MANAGER
          parentRoles: ["MANAGER"]
          condition:
            match:
              expr: request.resource.attr.region == request.principal.attr.region
  resource_expense.yaml: |
    ---
    apiVersion: api.cerbos.dev/v1
    resourcePolicy:
      version: "default"
      # Importing `common_roles` in so they can be used in the resource policy.
      importDerivedRoles:
        - common_roles

      # This resource file is reviewed for when checking permissions when a resource
      # is of `kind` "expense:object"
      resource: "expense"

      rules:
        # If the `principal`s role is `admin` then all the actions are allowed.
        - actions: ["*"]
          effect: EFFECT_ALLOW
          roles:
            - ADMIN

        # A `principal` that belongs to any of these groups "OWNER", "FINANCE" or
        # "REGION_MANAGER" is allowed to perform action "view".
        - actions: ["view"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - OWNER
            - FINANCE
            - REGION_MANAGER

        # A `principal` that belongs to any of these groups "OWNER" or "FINANCE" is
        # allowed to view the approver field via "view:approver" action.
        - actions: ["view:approver"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - FINANCE
            - FINANCE_MANAGER

        # A `principal` that owns the resource can view the approver if its is approved
        - actions: ["view:approver"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - OWNER
          condition:
            match:
              expr: request.resource.attr.status == "APPROVED"

        - actions: ["create"]
          effect: EFFECT_ALLOW
          roles:
            - USER
            - MANAGER

        # A `principal` that owns the resource can update if it is OPEN
        - actions: ["update"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - OWNER
          condition:
            match:
              expr: request.resource.attr.status == "OPEN"

        # A `principal` that belongs to "FINANCE_MANAGER" role is allowed to perform "approve"
        # for any amount if they did not create it
        - actions: ["approve"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - FINANCE_MANAGER
          condition:
            match:
              all:
                of:
                  - expr: request.resource.attr.ownerId != request.principal.id
                  - expr: request.resource.attr.status == "OPEN"

        # A `principal` that belongs to "FINANCE" role is allowed to perform "approve"
        # action if the amount is <$10000 and they did not create it
        - actions: ["approve"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - FINANCE
          condition:
            match:
              all:
                of:
                  - expr: request.resource.attr.amount < 50000
                  - expr: request.resource.attr.ownerId != request.principal.id
                  - expr: request.resource.attr.status == "OPEN"

        # A `principal` that belongs to "FINANCE_MANAGER" role is allowed to perform "delete"
        # action.
        - actions: ["delete"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - FINANCE_MANAGER

        # A `principal` that owns the resource, with the status of OPEN and created
        # within the last hour can perform the "delete"
        - actions: ["delete"]
          effect: EFFECT_ALLOW
          derivedRoles:
            - OWNER
          condition:
            match:
              all:
                of:
                  - expr: request.resource.attr.status == "OPEN"
                  # - expr: timestamp(request.resource.attr.createdAt).timeSince() < duration("1h")
  resource_features.yaml: |
    ---
    apiVersion: api.cerbos.dev/v1
    resourcePolicy:
      version: "default"
      resource: "features"
      rules:
        - actions: ["*"]
          effect: EFFECT_ALLOW
          roles:
            - ADMIN

        - actions: ["expenses"]
          effect: EFFECT_ALLOW
          roles:
            - USER
            - MANAGER

        - actions: ["reports"]
          effect: EFFECT_ALLOW
          roles:
            - MANAGER
